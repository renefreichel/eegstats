}
}
grand_average_erp_data <- colMeans(grand_average_erp_data) #
return(grand_average_erp_data)
}
grand_average_erp_data <- grand_average_erp(my_erpdata, electrode = 7)
grand_average_erp_plot <- function(my_erpdata, grand_average_erp_data) {
colours <- c('blue', 'black')
cond <- unique(my_erpdata[,2])
time <- unique(my_erpdata[,3])
for (i in 1:nrow(grand_average_erp_data)) { # number of conditions
if (i ==1) {
plot(grand_average_erp_data[i,], type = "l", col = colours[i], ylab = 'Amplitude', xlab = 'Time (ms)', xaxt = "n", main = paste('ERP Plot for ', length(cond), 'conditions'))
}
else if (i >= 2) {
lines(grand_average_erp_data[i,], col = colours[i])
}
}
legend('topleft', legend=cond, col=colours[1:i], lty=1, cex=0.8)
# add correct timepoints (as in original data)
desired_timepoints <- seq(from = time[1], to = time[length(time)], by = 400)
index_time <- c()
for (i in 1:length(desired_timepoints)) {
j <- desired_timepoints[i]
index_time[i] <- which(time == j)
}
axis(1, at = index_time, labels = desired_timepoints)
}
grand_average_erp_plot(my_erpdata, grand_average_erp_data)
grand_average_ersp <- function(my_erspdata) {
cond <- unique(my_erpdata[,2])
time <- unique(my_erpdata[,3])
grand_average_ersp_data <- array(NA, dim = c(length(conditions),length(timepoints), 20))
for (c in 1:length(cond)) { # all conditions
for (t in 1:length(time)) { # all timepoints
grand_average_ersp_data[c, t,] <-  colMeans(my_erpdata[my_erpdata[,2] == cond[c] & my_erpdata[,3] == time[t], c(4:ncol(my_erpdata))])
}
}
return(grand_average_ersp_data)
}
grand_average_ersp_data <- grand_average_ersp(my_erpdata)
grand_average_ersp_plot <- function(my_erspdata, grand_average_ersp_data, n_cond) {
cond <- unique(my_erpdata[,2])
time <- unique(my_erpdata[,3])
# get the right label for the heatmap
labRow_label = seq(from = time[1], to = time[length(time)], by = 1)
# add correct timepoints (as in original data)
desired_timepoints <- seq(from = time[1], to = time[length(time)], by = 400,)
index_time <- c()
for (i in 1:length(desired_timepoints)) {
j <- desired_timepoints[i]
index_time[i] <- which(time == j)
}
labRow_label <- NA
labRow_label[index_time] <- desired_timepoints
# make the heatmap
data <- t(as.matrix(grand_average_ersp_data[n_cond,,]))
heatmap(data, Colv = NA, Rowv = NA, ylab = 'Frequency', xlab = 'Time (ms)', xaxt = "n", labCol = labRow_label)
}
grand_average_ersp_plot(my_erpdata, grand_average_ersp_data, n_cond = 1)
my_erpdata
grand_average_ersp_data
grand_average_ersp_data
grand_average_ersp_data <- grand_average_ersp(my_erpdata)
grand_average_ersp <- function(my_erspdata) {
cond <- unique(my_erpdata[,2])
time <- unique(my_erpdata[,3])
grand_average_ersp_data <- array(NA, dim = c(length(conditions),length(timepoints), 20))
for (c in 1:length(cond)) { # all conditions
for (t in 1:length(time)) { # all timepoints
grand_average_ersp_data[c, t,] <-  colMeans(my_erpdata[my_erpdata[,2] == cond[c] & my_erpdata[,3] == time[t], c(4:ncol(my_erpdata))])
}
}
return(grand_average_ersp_data)
}
grand_average_ersp_data <- grand_average_ersp(my_erpdata)
grand_average_ersp <- function(my_erspdata) {
cond <- unique(my_erpdata[,2])
time <- unique(my_erpdata[,3])
grand_average_ersp_data <- array(NA, dim = c(length(cond),length(timepoints), 20))
for (c in 1:length(cond)) { # all conditions
for (t in 1:length(time)) { # all timepoints
grand_average_ersp_data[c, t,] <-  colMeans(my_erpdata[my_erpdata[,2] == cond[c] & my_erpdata[,3] == time[t], c(4:ncol(my_erpdata))])
}
}
return(grand_average_ersp_data)
}
grand_average_ersp_data <- grand_average_ersp(my_erpdata)
# 5. grand average ersp
#' grand_average_ersp
#' @description  The function \emph{grand_average_ersp} computes the grand average  ERSP signal for all conditions and all frequencies from one electrode.
#' @param my_erspdata Input Matrix with shape: subject ID x condition x timex frequency (from only one electrode).
#' @details For more details, see Wikipedie page: \href{https://sccn.ucsd.edu/wiki/Chapter_11:_Time/Frequency_decomposition}{article}
#' @return A matrix that contains the grand average ERSP for all conditions and all frequencies of one electrode. The matrix will be of shape condition x time x frequency.
#' @export grand_average_ersp_data
#' @seealso Add example of similar functions [still to be done].
cond <- unique(my_erpdata[,2])
# 5. grand average ersp
#' grand_average_ersp
#' @description  The function \emph{grand_average_ersp} computes the grand average  ERSP signal for all conditions and all frequencies from one electrode.
#' @param my_erspdata Input Matrix with shape: subject ID x condition x timex frequency (from only one electrode).
#' @details For more details, see Wikipedie page: \href{https://sccn.ucsd.edu/wiki/Chapter_11:_Time/Frequency_decomposition}{article}
#' @return A matrix that contains the grand average ERSP for all conditions and all frequencies of one electrode. The matrix will be of shape condition x time x frequency.
#' @export grand_average_ersp_data
#' @seealso Add example of similar functions [still to be done].
grand_average_ersp <- function(my_erspdata) {
cond <- unique(my_erpdata[,2])
time <- unique(my_erpdata[,3])
grand_average_ersp_data <- array(NA, dim = c(length(cond),length(time), 20))
for (c in 1:length(cond)) { # all conditions
for (t in 1:length(time)) { # all timepoints
grand_average_ersp_data[c, t,] <-  colMeans(my_erpdata[my_erpdata[,2] == cond[c] & my_erpdata[,3] == time[t], c(4:ncol(my_erpdata))])
}
}
return(grand_average_ersp_data)
}
grand_average_ersp_data <- grand_average_ersp(my_erpdata)
grand_average_ersp_data
ind_average_erp_plot <- function(my_erpdata, ind_average_erp_data) {
colours <- c('red', 'green', 'blue', 'black', 'green')
cond <- unique(my_erpdata[,2])
time <- unique(my_erpdata[,3])
for (s in 1:nrow(ind_average_erp_data)) {
for (i in 1:ncol(ind_average_erp_data)) {
if (i ==1) {
plot(ind_average_erp_data[s,i,], type = "l", col = colours[i], ylim = c(-30,30), ylab = 'Amplitude', xlab = 'Time (ms)', xaxt = "n", main = paste('ERP Plot for ', length(cond), 'conditions'))
}
else if (i >= 2) {
lines(ind_average_erp_data[s,i,], col = colours[i])
}
}
legend('topleft', legend=cond, col=colours[1:i], lty=1, cex=0.8)
# add correct timepoints (as in original data)
desired_timepoints <- seq(from = time[1], to = time[length(time)], by = 400)
index_time <- c()
for (i in 1:length(desired_timepoints)) {
j <- desired_timepoints[i]
index_time[i] <- which(timepoints == j)
}
axis(1, at = index_time, labels = desired_timepoints)
}
}
ind_average_erp_plot(my_erpdata, ind_average_erp_data)
# 8. ERSP / ERP correlation
my_erpdata
ind_average_erp_data
my_erpdata
unique(my_erpdata[,1])
electrode
electrode = 6
my_erpdata[my_erpdata[,1] == s,electrode]
for (s in 1:unique(my_erpdata[,1])) {
}
my_erpdata[my_erpdata[,1] == s,electrode]
s
my_erpdata[s,1]
my_erpdata[my_erpdata[,1] == my_erpdata[s,1]),electrode]
my_erpdata[,1] == my_erpdata[s,1])
y_erpdata[my_erpdata[,1] == my_erpdata[s,1],electrode]
my_erpdata[my_erpdata[,1] == my_erpdata[s,1],electrode]
my_erpdata[my_erpdata[,1] == my_erpdata[s,1],electrode]
my_erpdata[my_erpdata[,1] == my_erpdata[s,1],]
time_erp = 100
my_erpdata[my_erpdata[,1] == my_erpdata[s,1] & my_erpdata[s,3] == time_erp, electrode]
time_erp
my_erpdata[my_erpdata[,1] == my_erpdata[s,1] & my_erpdata[s,3] == 68, electrode]
my_erpdata[s,3] == 8
my_erpdata[,3] == 8
my_erpdata[my_erpdata[,1] == my_erpdata[s,1] & my_erpdata[,3] == 8, electrode]
electrode
my_erpdata[,3] == 8
sum(my_erpdata[,3] == 8)
my_erpdata[,1] == my_erpdata[s,1]
my_erpdata[,1] == my_erpdata[s,1] & my_erpdata[,3] == 8
sum(my_erpdata[,1] == my_erpdata[s,1] & my_erpdata[,3] == 8)
my_erpdata[my_erpdata[,1] == my_erpdata[s,1] & my_erpdata[,3] == 8,]
time_erp = 8
unique(my_erpdata[,2]))
unique(my_erpdata[,2])
c = 2
my_erpdata[my_erpdata[,1] == my_erpdata[s,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] == c, electrode]
my_erpdata[my_erpdata[,1] == my_erpdata[s,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
erp_ersp <- matrix(NA, 4, unique(my_erpdata[,1]))
erp_ersp[,1] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
erp_ersp <- matrix(NA, unique(my_erpdata[,1]), 4)
erp_ersp[,1] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
erp_ersp <- matrix(NA, unique(my_erpdata[,1]), 4)
erp_ersp <- matrix(NA, length(unique(my_erpdata[,1])), 4)
erp_ersp[,1] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
grand_average_ersp_data
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
ersp <- matrix(NA, length(unique(my_erpdata[,1])), 4)   # subject x cond
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
erp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
ersp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
for (c in 1:unique(my_erpdata[,2])) { # cond
erp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
}
for (c in 1:unique(my_erpdata[,2])) { # cond
erp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
}
for (c in 1:length(unique(my_erpdata[,2])) { # cond
erp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
for (c in 1:length(unique(my_erpdata[,2])) { # cond
for (c in 1:length(unique(my_erpdata[,2]))) { # cond
erp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
}
ersp
cor(erp, ersp)
erp
ersp
cor(erp, ersp)
rcorr(erp, ersp)
corr(erp, ersp)
cor(erp, ersp)
erp == ersp
cor(erp, ersp)
cor(erp, ersp, )
cor(erp, ersp)
cor(erp[,1], ersp[,2])
cor(erp[,2], ersp[,2])
cor(erp[,1], ersp[,2])
erp_ersp_cor <- function(my_erpdata, electrode, time_erp, cond) {
erp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
ersp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
for (c in 1:length(unique(my_erpdata[,2]))) { # cond
erp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
}
return(cor(erp[,1], ersp[,2]))
}
erp_ersp_cor(my_erpdata, 10, 40, 1)
erp_ersp_cor(my_erpdata, 10, 40, 2
)
erp_ersp_cor <- function(my_erpdata, electrode, time_erp) {
erp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
ersp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
for (c in 1:length(unique(my_erpdata[,2]))) { # cond
erp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
}
return(cor(erp[,1], ersp[,2]))
}
erp_ersp_cor(my_erpdata, 10, 40)
cor(erp[,1], ersp[,1])
return(cor(erp[,2], ersp[,2]))
cor(erp[,2], ersp[,2])
erp_ersp_cor <- function(my_erpdata, electrode, time_erp) {
erp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
ersp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
for (c in 1:length(unique(my_erpdata[,2]))) { # cond
erp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
}
return(list(cor(erp[,1], ersp[,1]), cor(erp[,2], ersp[,2]))
#return(cor(erp[,2], ersp[,2]))
}
erp_ersp_cor(my_erpdata, 10, 40)
)
erp_ersp_cor(my_erpdata, 10, 40)
erp_ersp_cor <- function(my_erpdata, electrode, time_erp) {
erp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
erp_ersp_cor <- function(my_erpdata, electrode, time_erp) {
erp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
ersp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
for (c in 1:length(unique(my_erpdata[,2]))) { # cond
erp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
}
return(list(cor(erp[,1], ersp[,1]), cor(erp[,2], ersp[,2])))
#return(cor(erp[,2], ersp[,2]))
}
erp_ersp_cor(my_erpdata, 10, 40)
)
erp_ersp_cor <- function(my_erpdata, electrode, time_erp) {
erp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
ersp <- matrix(NA, length(unique(my_erpdata[,1])), 2)   # subject x cond
for (c in 1:length(unique(my_erpdata[,2]))) { # cond
erp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode]
ersp[,c] <- my_erpdata[my_erpdata[,1] == my_erpdata[,1] & my_erpdata[,3] == time_erp &  my_erpdata[,2] ==  my_erpdata[s,2], electrode + 1]
}
return(list(cor(erp[,1], ersp[,1]), cor(erp[,2], ersp[,2])))
#return(cor(erp[,2], ersp[,2]))
}
erp_ersp_cor(my_erpdata, 10, 40)
#' correlate_erp_ersp
#' @description  The function \emph{erp_ersp_cor} correlates a selected ERP and ERSP component.
#' @param my_erspdata Input Matrix with shape: subject ID x condition x time x frequency (from only one electrode).
#' @param erpdata Input Matrix with shape: subject ID x condition x time x electrode
#' @param electrode A character that specifies the number of electrode that should be used for ERP calculation.
#' @param frequency A numeric value that specifies the desired frequency.
#' @param time_erp A numeric value that specifies the time of the ERP (e.g. 20) in ms
#' @return A correlation matrix with the correlations between the specified erp and ersp for all conditions.
#' @return A correlation plot thatr illustrates the ERP / ERSP correlations for all conditions.
#' @export
correlate_erp_ersp <- function(erpdata, electrode, time_erp, my_erspdata, frequency) {
# input should be only one electrode
if (length(electrode) != 1) {
stop('Data from only one electrode should be provided as input.')
}
# check whether electrode is in data
if (sum(is.element(electrode, colnames(erpdata)) == 0)) {
stop('At least one of the specified electrodes is not part of the data.')
}
# find index of electrode
electrode_index <- matrix(NA)
for (i in 1:length(electrode)) {
electrode_index[i] <- which(colnames(erpdata)== electrode[i])
}
#dev.off()
cond <- unique(my_erpdata[,2])
erp <- matrix(NA, length(unique(erpdata[,1])), length(cond))   # subject x cond
ersp <- matrix(NA, length(unique(my_erspdata[,1])), length(cond))   # subject x cond
cors <- matrix(NA, nrow = length(cond), ncol = length(cond))
# get ERPs and ERSPs
for (c in 1:length(cond)) { # cond
erp[,c] <- my_erpdata[erpdata[,1] == erpdata[,1] & erpdata[,3] == time_erp
&  erpdata[,2] ==  cond[c], electrode_index]
ersp[,c] <- my_erspdata[my_erspdata[,1] == my_erspdata[,1] & my_erspdata[,3] == time_erp
&  my_erspdata[,2] == cond[c], frequency]
}
# correlations
cors <- as.matrix(cor(erp,ersp))
# get p-values
pvals <- matrix(NA, nrow = length(cond), ncol = length(cond))
for (i in 1:length(cond)) {
for (j in 1:length(cond)) {
pvals[i,j] <- cor.test(erp[,i],ersp[,j])$p.value
}
}
#
if (length(cond) == 2) {
rownames(cors) <- c(paste('ERP Cond.', cond[1]), paste('ERP Cond.', cond[2]))
colnames(cors) <- c(paste('ERSP Cond.', cond[1]), paste('ERSP Cond.', cond[2]))
}
#return((list(cor(erp[,1], ersp[,1]), cor(erp[,2], ersp[,2]), erp, ersp)))
d <- corrplot::corrplot(cors, method = 'number', p.mat = pvals, insig = 'pch', pch = 4)
par(d, cex = 1.2)
return(list(cors, erp, ersp, pvals))
}
electrode = 'Cz'
time_erp = 100
frequency = 10
correlate_erp_ersp(my_erpdata, electrode, time_erp, my_erspdata, frequency)
correlate_erp_ersp(my_erpdata, time_erp, my_erspdata = my_erpdata, electrode = 'Cz', frequency )
#' reading_data
#' @description  The function \emph{reading_data} checks whether the shape of the input matrix is correct
#' and adds the electrode names to the datafile. This function should be run before running other eegstats
#' functions. If there are indications that the shape of the input file is not correct, warning messages
#' with relevant instructions will appear. The function also prints a short description of the dataset.
#' @param erpdata Input Matrix with shape: subject ID x condition x time x electrodes
#' @param electrode_names Vector of characters for the respective electrode names
#' @return A short description of the input data and potential concerns as warnings.
#' @export
reading_data <- function(erpdata, electrode_names) {
n_warnings <- 0
# 1. ensure data is properly pre-processed:
# NAs
if (sum(is.na(erpdata) > 0)) {
warning('There is some missing data in your input. Make sure to pre-process it first.')
n_warnings <- n_warnings + 1
}
# Inspection for first electrode: outlier (Are values that deviate more than 5 SD removed) ?
possible_outlier <- 0 # initiate object: 0 outlier
print('The outlier inspection might take up to one minute for a large number of electrodes!')
for (e in 4:ncol(erpdata)) { # over all electrodes
for (i in 1:length(erpdata[,e])) {
threshold <- 5 * sd(erpdata[,e])
if ((erpdata[i,e] > (mean(erpdata[,e]) + threshold))
| (erpdata[i,e] < (mean(erpdata[,e]) - threshold))) {
possible_outlier <- c(possible_outlier, i)
}
}
#return(unique(possible_outlier))
}
# show warning if outlier were found
if (length(possible_outlier) > 1) {
warning(paste(paste('The data contains amplitude values at electrodes that deviate more than 5 standard deviations from the mean. For instance, for subject', my_erpdata[possible_outlier[2],1])),'. Make sure the data is pre-processed and outliers are removed!')
n_warnings <- n_warnings + 1
}
#2. ensure data is the correct format:
# input should be a data frame
if (!is.data.frame(erpdata)) {
warning('The input should be a data.frame of shape subject x condition x time x electrode!')
n_warnings <- n_warnings + 1
}
# input should be in a long format
if (length(unique(erpdata[,1])) == length(erpdata[,1])) {
warning('There might be only one time point and or one condition in this dataset. Make sure
that the dataset is in the right format!')
n_warnings <- n_warnings + 1
}
# there need to be more than one condition
if (length(unique(erpdata[,2])) == 1) {
warning('There is only one condition. Make sure there are at least two conditions for later
experimental comparisons!')
n_warnings <- n_warnings + 1
}
# there need to be the same timepoints for all subjects
if (length(unique(erpdata[,3])) == length(erpdata[,3])) {
warning('There might be only one subject in the dataset or several subjects with different
time points. Make sure the (measured) timepoints are the same across all subjects!')
n_warnings <- n_warnings + 1
}
# 3. Add electrode names to data
if (length(electrode_names) != length(4: ncol(erpdata))) {
stop('The number of electrodes does not match the input matrix. Make sure the number of electrode names corresponds to the number of electrodes in the datafile!')
}
infos <- c('Subject', 'Condition', 'Time')
colnames(erpdata) <- c(infos, electrode_names)
# 4. Print descriptives
n_subj = length(unique(erpdata[,1]))
n_cond = length(unique(erpdata[,2]))
n_time = length(unique(erpdata[,3]))
n_elec = length(4:ncol(erpdata))
print(sprintf("Short summary: This dataset contains EEG data for %s subjects, %s conditions at %s electrodes and %s timepoints. Double check that this is the correct before using other eegstats functions.", n_subj, n_cond,n_elec, n_time))
if (n_warnings == 0) {
print(sprintf("There are no %s concerns and the data seems to be in the right shape. Enjoy the eegstats functions!", n_warnings))
} else if (n_warnings == 1) {
print(sprintf("There is %s concern. See warning message", n_warnings))
} else if (n_warnings >= 1) {
print(sprintf("There are %s concerns. See warning messages:", n_warnings))
}
return(erpdata)
}
# Call function
electrode_names <- c('FCz','FPz','Cz','Fz','Pz','Oz','FC1','FC2','FC3','FC4','FC5','FC6','C1','C2','C3','P1','P2','P3', 'O1', 'O2')
reading_data(my_erpdata, electrode_names)
# Single - Subject ERP
#' compute_ind_average_erp
#' @description  The function \emph{ind_average_erp} computes the single subject ERP signal for all conditions and a given electrode.
#' @param erpdata Input Matrix with shape: subject x condition x time x electrodes.
#' @param electrode A character that specifies the electrode that should be plotted.
#' @param subject A character or a vector of characters that contains the number of subject (e.g. 'SO1')
#' @details For more details, see Wikipedie page: \href{https://sccn.ucsd.edu/wiki/I.6:_Data_Averaging}{article}
#' @return A matrix that contains the single-subject ERP for all conditions in a selected electrode. The matrix will be of shape electrode x condition x subject.
#' @export
compute_ind_average_erp <- function(erpdata, electrode, subject) {
# input should be only one electrode
if (length(electrode) != 1) {
stop('Data from only one electrode should be provided as input.')
}
# check for missing data
if (sum(is.na(erpdata)) > 0) {
warning('The input matrix contains missing data!')
}
# check whether electrode is in data
if (sum(is.element(electrode, colnames(erpdata)) == 0)) {
stop('At least one of the specified electrodes is not part of the data.')
}
# find index of electrode
electrode_index <- matrix(NA)
for (i in 1:length(electrode)) {
electrode_index[i] <- which(colnames(erpdata)== electrode[i])
}
cond <- unique(erpdata[,2])
time <- unique(erpdata[,3])
# compute grand average (GA):
ind_average_erp_data <- array(NA, dim = c(length(subject),length(cond),length(time)));
for (s in 1:length(subject)) { # all subjects
for (c in 1:length(cond)) { # all conditions
ind_average_erp_data[s,c,] <- erpdata[erpdata[,1] == subject[s] & erpdata[,2] == cond[c],electrode] # compute GA
}
}
return(ind_average_erp_data)
}
ind_average_erp_data <- compute_ind_average_erp(my_erpdata, electrode = 'Cz', subject = c('S1', 'S2', 'S3'))
my_erpdata <- reading_data(my_erpdata, electrode_names)
ind_average_erp_data <- compute_ind_average_erp(my_erpdata, electrode = 'Cz', subject = c('S1', 'S2', 'S3'))
ind_average_erp_data
# 2. ind_average_erp_plot
#' plot_ind_average_erp
#'
#' @description  The function \emph{ind_average_plot} plots the single-subject ERP.
#' @param erpdata Input Matrix with shape: subject x condition x time x electrodes.
#' @param ind_average_erp_data Input Matrix that contains the single-subject ERP for all conditions in a selected electrode. The matrix should be of shape condition x subject.
#' @return A plot with the sinlge subject - ERP.
#' @seealso Add example of similar functions [still to be done].
#' @export
plot_ind_average_erp <- function(erpdata, ind_average_erp_data) {
#dev.off()
colours <- c('red', 'green', 'blue', 'black', 'green')
cond <- unique(erpdata[,2])
time <- unique(erpdata[,3])
par(mfrow = c(1, nrow(ind_average_erp_data)))
for (s in 1:nrow(ind_average_erp_data)) {
for (i in 1:ncol(ind_average_erp_data)) {
if (i ==1) {
plot(ind_average_erp_data[s,i,], type = "l", col = colours[i], ylim = c(-30,30),
ylab = 'Amplitude', xlab = 'Time (ms)', xaxt = "n",
main = paste('ERP subject',s, 'for ', length(cond), 'conditions'))
}
else if (i >= 2) {
lines(ind_average_erp_data[s,i,], col = colours[i])
}
}
legend('topleft', legend=cond, col=colours[1:i], lty=1, cex=0.8)
# add correct timepoints (as in original data)
desired_timepoints <- seq(from = time[1], to = time[length(time)], by = 400)
index_time <- c()
for (i in 1:length(desired_timepoints)) {
j <- desired_timepoints[i]
index_time[i] <- which(time == j)
}
axis(1, at = index_time, labels = desired_timepoints)
}
}
plot_ind_average_erp(my_erpdata, ind_average_erp_data)
